semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
validation <- temp %>%>
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
head(edx)
glimpse(edx)
n_distinct(edx$movieId)
n_distinct(edx$genres)
n_distinct(edx$userId)
mu <- mean(edx$rating)
mu
RMSE(validation$rating, mu)
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = mean(rating - mu))
predicted_ratings <- validation %>%
left_join(b_i, by='movieId') %>%
mutate(pred = mu + b_i) %>%
pull(pred)
RMSE(validation$rating, predicted_ratings)
qplot(b_i, data = b_i, bins = 15, color = I("black"))
b_u <- edx %>%
left_join(b_i, by='movieId') %>%
group_by(userId) %>%
summarize(b_u = mean(rating - mu - b_i))
b_u
predicted_ratings <- validation %>%
left_join(b_i, by='movieId') %>%
left_join(b_u, by='userId') %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
RMSE(predicted_ratings, validation$rating)
lambdas <- seq(from=0, to=10, by=0.25)
rmses <- sapply(lambdas, function(l){
# calculate average rating across training data
mu <- mean(edx$rating)
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
b_u <- edx %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
predicted_ratings <- validation %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
return(RMSE(predicted_ratings, validation$rating))
})
qplot(lambdas, rmses)
min(rmses)
lam <- lambdas[which.min(rmses)]
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+lam))
b_u <- edx %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+lam))
predicted_ratings <- validation %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
RMSE(predicted_ratings, validation$rating)
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
library(tidyverse)
library(caret)
library(data.table)
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
ratings <- fread(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
colnames(movies)
# if using R 3.6 or earlier:
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(levels(movieId))[movieId],
title = as.character(title),
genres = as.character(genres))
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
library(tidyverse)
library(caret)
library(data.table)
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
ratings <- fread(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
colnames(movies)
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(movieId),
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
movielens
##########################################################
# Create edx set, validation set (final hold-out test set)
##########################################################
# Note: this process could take a couple of minutes
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
library(tidyverse)
library(caret)
library(data.table)
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
ratings <- fread(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
colnames(movies)
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(movieId),
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
movielens
set.seed(1, sample.kind="Rounding") # if using R 3.5 or earlier, use `set.seed(1)`
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
temp
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
head(edx)
head(edx)
head(edx)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
head(edx)
glimpse(edx)
n_distinct(edx$movieId)
n_distinct(edx$genres)
n_distinct(edx$userId)
mu <- mean(edx$rating)
mu
RMSE(validation$rating, mu)
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = mean(rating - mu))
predicted_ratings <- validation %>%
left_join(b_i, by='movieId') %>%
mutate(pred = mu + b_i) %>%
pull(pred)
RMSE(validation$rating, predicted_ratings)
qplot(b_i, data = b_i, bins = 15, color = I("black"))
b_u <- edx %>%
left_join(b_i, by='movieId') %>%
group_by(userId) %>%
summarize(b_u = mean(rating - mu - b_i))
b_u
predicted_ratings <- validation %>%
left_join(b_i, by='movieId') %>%
left_join(b_u, by='userId') %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
RMSE(predicted_ratings, validation$rating)
# determine best lambda from a sequence
lambdas <- seq(from=0, to=10, by=0.25)
rmses <- sapply(lambdas, function(l){
mu <- mean(edx$rating)
# compute regularized movie bias term
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
b_u <- edx %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
predicted_ratings <- validation %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
return(RMSE(predicted_ratings, validation$rating))
})
qplot(lambdas, rmses)
min(rmses)
lam <- lambdas[which.min(rmses)]
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+lam))
b_u <- edx %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+lam))
predicted_ratings <- validation %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
RMSE(predicted_ratings, validation$rating)
View(validation)
View(validation)
View(validation)
View(b_i)
RMSE(predicted_ratings, validation$rating)
knitr::opts_chunk$set(echo = TRUE)
# Most rated films
edx %>% group_by(title) %>%
summarize(n_ratings = n()) %>%
arrange(desc(n_ratings))
# Number of movies rated once
edx %>% group_by(title) %>%
summarize(n_ratings = n()) %>%
filter(n_ratings==1) %>%
count() %>% pull()
glimpse(validation)
mu <- mean(edx$rating)
RMSE(validation$rating, mu)
# add movie bias term, b_i
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = mean(rating - mu))
# predict all unknown ratings with mu and b_i
predicted_ratings <- validation %>%
left_join(b_i, by='movieId') %>%
mutate(pred = mu + b_i) %>%
pull(pred)
# calculate RMSE of movie ranking effect
RMSE(validation$rating, predicted_ratings)
# add user bias term, b_u
b_u <- edx %>%
left_join(b_i, by='movieId') %>%
group_by(userId) %>%
summarize(b_u = mean(rating - mu - b_i))
# predict new ratings with movie and user bias
predicted_ratings <- validation %>%
left_join(b_i, by='movieId') %>%
left_join(b_u, by='userId') %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
# calculate RMSE of movie and user bias effect
RMSE(predicted_ratings, validation$rating)
# determine best lambda from a sequence
lambdas <- seq(from=0, to=10, by=0.25)
# output RMSE of each lambda, repeat earlier steps (with regularization)
rmses <- sapply(lambdas, function(l){
# calculate average rating across training data
mu <- mean(edx$rating)
# compute regularized movie bias term
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
# compute regularize user bias term
b_u <- edx %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
# compute predictions on validation set based on these above terms
predicted_ratings <- validation %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
# output RMSE of these predictions
return(RMSE(predicted_ratings, validation$rating))
})
qplot(lambdas, rmses)
lambdas[which.min(rmses)]
# choose minimized lambda
lam <- lambdas[which.min(rmses)]
# compute regularize movie bias term
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+lam))
# compute regularize user bias term
b_u <- edx %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+lam))
# compute predictions on validation set based on these above terms
predicted_ratings <- validation %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
# output RMSE of our final model
RMSE(predicted_ratings, validation$rating)
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
if(!require(data.table)) install.packages("data.table", repos = "http://cran.us.r-project.org")
library(tidyverse)
library(caret)
library(data.table)
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
ratings <- fread(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
colnames(movies)
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(movieId),
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
movielens
set.seed(1, sample.kind="Rounding") # if using R 3.5 or earlier, use `set.seed(1)`
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
temp
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
head(edx)
glimpse(edx)
n_distinct(edx$movieId)
n_distinct(edx$genres)
n_distinct(edx$userId)
mu <- mean(edx$rating)
mu
RMSE(validation$rating, mu)
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = mean(rating - mu))
predicted_ratings <- validation %>%
left_join(b_i, by='movieId') %>%
mutate(pred = mu + b_i) %>%
pull(pred)
RMSE(validation$rating, predicted_ratings)
qplot(b_i, data = b_i, bins = 15, color = I("black"))
b_u <- edx %>%
left_join(b_i, by='movieId') %>%
group_by(userId) %>%
summarize(b_u = mean(rating - mu - b_i))
b_u
b_u <- edx %>%
left_join(b_i, by='movieId') %>%
group_by(userId) %>%
summarize(b_u = mean(rating - mu - b_i))
b_u
predicted_ratings <- validation %>%
left_join(b_i, by='movieId') %>%
left_join(b_u, by='userId') %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
RMSE(predicted_ratings, validation$rating)
lambdas <- seq(from=0, to=10, by=0.25)
rmses <- sapply(lambdas, function(l){
mu <- mean(edx$rating)
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
b_u <- edx %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
# compute predictions on validation set based on these above terms
predicted_ratings <- validation %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
return(RMSE(predicted_ratings, validation$rating))
})
qplot(lambdas, rmses)
min(rmses)
lam <- lambdas[which.min(rmses)]
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+lam))
b_u <- edx %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+lam))
predicted_ratings <- validation %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
RMSE(predicted_ratings, validation$rating)
---
title: "Report on MovieLens Project"
author: "Ayman Tuffaha"
date: "8/27/2021"
output:
word_document: default
pdf_document: default
df_print: paged
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## About this document (R Markdown Document)
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
```{r setup, include=FALSE}
load("~/Documents/GitHub/edX/9-Capstone/MovieLensProject/data.RData")
library(tidyverse)
library(DescTools)
library(tinytex)
knitr::opts_chunk$set(echo = FALSE)
```
## Introduction
Machine learning is integral to a highly-technological modern business. It describes data about customer bases as a whole or personalizes an experience for a single user. The aim of machine learning is to process data into helpful information and naturally intuitive solutions. Effective machine learning algorithms have attracted a lot of attention in recent years: for example, in 2006, Netflix placed a seven-figure bounty on a verified improvemnent to their movie recommendation system.
We build off the Netflix challenge premise and, more specifically, predict movie ratings for users in a large dataset. We train a linear model to generate predicted movie ratings and calculate the Root Mean Square Error (RMSE) of the predicted ratings versus the actual ratings.
This report is composed of four parts: the introduction has presented the problem, the summary describes the dataset and develops preliminary inquiries, the methods section establishes the model and implements in with the accompanying .R file, and the conclusion section shares the results.wssa
## Summary
We use the [MovieLens 10M dataset](https://grouplens.org/datasets/movielens/10m/) that consists of 10 million ratings and 100,000 tag applications applied to 10,000 movies by 72,000 users. This leads to wildly varying numbers of ratings for each movie, with the most rated movie being *Pulp Fiction* (1994) with over 31,000 ratings and over 100 titles with a single rating.
```{r initial_inquiries, echo=TRUE}
# Most rated films
edx %>% group_by(title) %>%
summarize(n_ratings = n()) %>%
arrange(desc(n_ratings))
# Number of movies rated once
edx %>% group_by(title) %>%
summarize(n_ratings = n()) %>%
filter(n_ratings==1) %>%
count() %>% pull()
```
knitr::opts_chunk$set(echo = TRUE)
# Most rated films
edx %>% group_by(title) %>%
summarize(n_ratings = n()) %>%
arrange(desc(n_ratings))
# Number of movies rated once
edx %>% group_by(title) %>%
summarize(n_ratings = n()) %>%
filter(n_ratings==1) %>%
count() %>% pull()
glimpse(validation)
mu <- mean(edx$rating)
RMSE(validation$rating, mu)
# add movie bias term, b_i
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = mean(rating - mu))
# predict all unknown ratings with mu and b_i
predicted_ratings <- validation %>%
left_join(b_i, by='movieId') %>%
mutate(pred = mu + b_i) %>%
pull(pred)
# calculate RMSE of movie ranking effect
RMSE(validation$rating, predicted_ratings)
# add user bias term, b_u
b_u <- edx %>%
left_join(b_i, by='movieId') %>%
group_by(userId) %>%
summarize(b_u = mean(rating - mu - b_i))
# predict new ratings with movie and user bias
predicted_ratings <- validation %>%
left_join(b_i, by='movieId') %>%
left_join(b_u, by='userId') %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
# calculate RMSE of movie and user bias effect
RMSE(predicted_ratings, validation$rating)
# determine best lambda from a sequence
lambdas <- seq(from=0, to=10, by=0.25)
# output RMSE of each lambda, repeat earlier steps (with regularization)
rmses <- sapply(lambdas, function(l){
# calculate average rating across training data
mu <- mean(edx$rating)
# compute regularized movie bias term
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+l))
# compute regularize user bias term
b_u <- edx %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+l))
# compute predictions on validation set based on these above terms
predicted_ratings <- validation %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
# output RMSE of these predictions
return(RMSE(predicted_ratings, validation$rating))
})
qplot(lambdas, rmses)
lambdas[which.min(rmses)]
# choose minimized lambda
lam <- lambdas[which.min(rmses)]
# compute regularize movie bias term
b_i <- edx %>%
group_by(movieId) %>%
summarize(b_i = sum(rating - mu)/(n()+lam))
# compute regularize user bias term
b_u <- edx %>%
left_join(b_i, by="movieId") %>%
group_by(userId) %>%
summarize(b_u = sum(rating - b_i - mu)/(n()+lam))
# compute predictions on validation set based on these above terms
predicted_ratings <- validation %>%
left_join(b_i, by = "movieId") %>%
left_join(b_u, by = "userId") %>%
mutate(pred = mu + b_i + b_u) %>%
pull(pred)
# output RMSE of our final model
RMSE(predicted_ratings, validation$rating)
